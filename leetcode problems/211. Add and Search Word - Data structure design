class TrieNode{
public:
    int path;
    int end;
    TrieNode *child[26];
    TrieNode(){
        path = 0;
        end = 0;
        for(int i=0; i<26; ++i){
            child[i] = NULL;
        }
    }
};
class WordDictionary {
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        root = new TrieNode();
    }

    /** Adds a word into the data structure. */
    void addWord(string word) {
        if(word == "") return;
        TrieNode *node = root;
        for(int i=0; i<word.size(); ++i){
            int index = word[i] - 'a';
            if(node->child[index] == NULL){
                node->child[index] = new TrieNode();
            }
            node = node->child[index];
            node->path++;
        }
        node->end++;
    }

    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        if(word == "") return false;
        TrieNode *node = root;
        return subSearch(word,0,node);
    }
    bool subSearch(string word,int cur,TrieNode *curNode){
        if(cur == word.size()) return curNode->end != 0;
        if(word[cur] == '.'){
            for(int j=0; j<26; ++j){
                if(curNode->child[j] && subSearch(word,cur+1,curNode->child[j])){
                    return true;
                }
            }
            return false;
        }else{
            int index = word[cur]-'a';
            if(curNode->child[index] != NULL){
                return subSearch(word,cur+1,curNode->child[index]);
            }else{
                return false;
            }
        }
    }
private:
    TrieNode *root;
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * bool param_2 = obj.search(word);
 */
