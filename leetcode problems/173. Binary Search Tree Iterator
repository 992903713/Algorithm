/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator1 {
public:
    BSTIterator(TreeNode *root) {
        generate(root);
    }
    void generate(TreeNode* root){
        if(!root) return;
        generate(root->left);
        Q.push(root->val);
        generate(root->right);
    }
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !Q.empty();
    }

    /** @return the next smallest number */
    int next() {
        if(Q.empty()) return NULL;
        int val = Q.front();
        Q.pop();
        return val;
    }
private:
    queue<int> Q;
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator2 {
public:
    BSTIterator(TreeNode *root) {
        while(root){
            S.push(root);
            root = root->left;
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !S.empty();
    }

    /** @return the next smallest number */
    int next() {
        if(S.empty()) return NULL;
        TreeNode *node = S.top();
        S.pop();
        int val = node->val;
        node = node->right;
        while(node){
            S.push(node);
            node = node->left;
        }

        return val;
    }
private:
    stack<TreeNode*> S;
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
